// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String        @id @default(cuid())
  name            String?
  login           String
  is_active       Boolean
  first_name      String
  last_name       String
  user_role       UserRole      @relation(fields: [userRoleId], references: [id])
  userRoleId      String
  email           String?       @unique
  emailVerified   DateTime?
  password        String
  image           String?
  accounts        Account[]
  sessions        Session[]
  birth_date      DateTime?
  social_networks Json?
  phone           String?
  favorites       String[]
  reviews         UserReview[]
  Estate          Estate[]
  chatsFrom       Chat[]        @relation("chatsFrom")
  chatsTo         Chat[]        @relation("chatsTo")
  messagesFrom    ChatMessage[] @relation("messagesFrom")
  messagesTo      ChatMessage[] @relation("messagesTo")
  created_at      DateTime      @default(now())
  updated_at      DateTime      @default(now())
}

model UserRole {
  id   String @id @unique @default(cuid())
  name String @unique
  User User[]
}

model Estate {
  id             String           @id @unique @default(cuid())
  name           String
  code           String
  description    String
  price          Int
  area           Int
  address        String
  estate_type    EstateType       @relation(fields: [estateTypeId], references: [id])
  photo_cover    String?
  photo_gallery  Json?
  estateTypeId   String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  metro          Metro?           @relation(fields: [metroId], references: [id])
  userId         String
  metroId        String?
  presentation   String?
  active         Boolean?
  EstateBusyTime EstateBusyTime[]
  chats          Chat[]
}

model EstateType {
  id     String   @id @unique @default(cuid())
  name   String
  code   String
  estate Estate[]
}

model EstateBusyTime {
  id           String    @id @unique @default(cuid())
  type         String
  status       String
  date_from    DateTime?
  date_to      DateTime?
  estate       Estate    @relation(fields: [estateId], references: [id])
  estateId     String
  document_url String?
  chat         Chat?     @relation(fields: [chatId], references: [id])
  chatId       String?   @unique
}

model UserReview {
  id     String  @id @unique @default(cuid())
  title  String
  rating Int
  text   String?
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Metro {
  id     String   @id @unique @default(cuid())
  name   String
  code   String
  Estate Estate[]
}

model Chat {
  id             String          @id @unique @default(cuid())
  userFrom       User            @relation("chatsFrom", fields: [chatFromId], references: [id])
  userTo         User            @relation("chatsTo", fields: [chatToId], references: [id])
  chatFromId     String
  chatToId       String
  estate_booking EstateBusyTime?
  messages       ChatMessage[]
  estate         Estate @relation(fields: [estateId], references: [id])
  estateId     String
}

model ChatMessage {
  id         String   @id @unique @default(cuid())
  content    String
  created_at DateTime @default(now())
  type       String
  Chat       Chat?    @relation(fields: [chatId], references: [id])
  chatId     String?
  userFrom   User     @relation("messagesFrom", fields: [userFromId], references: [id])
  userTo     User     @relation("messagesTo", fields: [userToId], references: [id])
  userFromId String
  userToId   String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}